
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\003\000\002\004\003\000\002\006\007\000" +
    "\002\006\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\005\003\000\002\005" +
    "\003\000\002\005\004\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\014\007\007\014\006\021\014\022\011\023" +
    "\010\001\002\000\022\004\025\005\023\006\027\007\024" +
    "\010\022\011\026\012\ufffb\016\ufffb\001\002\000\016\006" +
    "\042\007\041\010\040\012\ufffa\016\ufffa\020\037\001\002" +
    "\000\014\007\007\014\006\021\016\022\021\023\010\001" +
    "\002\000\014\007\007\014\006\021\016\022\021\023\010" +
    "\001\002\000\030\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\001\002\000\020\006\ufff8\007\ufff8\010\ufff8\012\ufff8\013" +
    "\055\016\ufff8\020\ufff8\001\002\000\006\012\uffff\016\uffff" +
    "\001\002\000\004\002\050\001\002\000\024\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\015" +
    "\016\ufff2\001\002\000\014\007\007\014\006\021\016\022" +
    "\021\023\010\001\002\000\030\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\001\002\000\012\006\042\007\041\010\040" +
    "\020\037\001\002\000\022\004\025\005\023\006\027\007" +
    "\024\010\022\011\026\012\ufffd\016\ufffd\001\002\000\030" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\001\002\000\014" +
    "\007\007\014\006\021\016\022\021\023\010\001\002\000" +
    "\014\007\007\014\006\021\016\022\021\023\010\001\002" +
    "\000\014\007\007\014\006\021\016\022\021\023\010\001" +
    "\002\000\014\007\007\014\006\021\016\022\021\023\010" +
    "\001\002\000\014\007\007\014\006\021\016\022\021\023" +
    "\010\001\002\000\014\007\007\014\006\021\016\022\021" +
    "\023\010\001\002\000\030\004\025\005\023\006\uffec\007" +
    "\uffec\010\022\011\026\012\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\001\002\000\030\004\025\005\023\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\001\002\000\026\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\001\002\000\030\004\025\005\023\006\uffeb\007\uffeb\010" +
    "\022\011\026\012\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\001\002\000\030\004\025\005\023\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\001\002\000\030\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\001\002\000\030\004\025\005\023\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\001\002\000\014\007\007\014\006\021\016\022\021\023" +
    "\010\001\002\000\014\007\007\014\006\021\016\022\021" +
    "\023\010\001\002\000\014\007\007\014\006\021\016\022" +
    "\021\023\010\001\002\000\014\007\007\014\006\021\016" +
    "\022\021\023\010\001\002\000\030\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\040\011\ufff7\012\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\037\001\002\000\016\004\025\005\023\006" +
    "\027\007\024\010\022\011\026\001\002\000\030\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\040\011\ufff6\012\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\037\001\002\000\030\004\025" +
    "\005\023\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\001\002\000\030\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\010\040\011\uffea\012\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\001\002\000\004\002\000" +
    "\001\002\000\006\012\052\016\053\001\002\000\014\007" +
    "\007\014\006\021\014\022\011\023\010\001\002\000\004" +
    "\002\001\001\002\000\006\012\ufffe\016\ufffe\001\002\000" +
    "\014\007\007\014\006\021\016\022\021\023\010\001\002" +
    "\000\016\006\042\007\041\010\040\012\ufffc\016\ufffc\020" +
    "\037\001\002\000\030\004\025\005\023\006\ufff1\007\ufff1" +
    "\010\022\011\026\012\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\001\002\000\020\004\025\005\023\006\027\007\024" +
    "\010\022\011\026\017\061\001\002\000\014\007\007\014" +
    "\006\021\016\022\021\023\010\001\002\000\020\004\025" +
    "\005\023\006\027\007\024\010\022\011\026\015\063\001" +
    "\002\000\030\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\012\002\012\004\011\005\003\006\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\057" +
    "\006\016\001\001\000\006\005\056\006\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\017\006" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\035\006\034\001" +
    "\001\000\006\005\033\006\016\001\001\000\006\005\032" +
    "\006\016\001\001\000\006\005\031\006\016\001\001\000" +
    "\006\005\030\006\016\001\001\000\006\005\027\006\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\043\006\046\001\001\000" +
    "\006\005\045\006\016\001\001\000\006\005\043\006\044" +
    "\001\001\000\006\005\043\006\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\053\005\003\006\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\043\006\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\061\006\016\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	Double
	[]
	scalar_variables
	=
	new Double
	[26];
	
	Double
	[][]
	vector_variables
	=
	new
	Double
	[26]
	[2];


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // input ::= statement statements question_mark 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= input EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statements semicolon statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= scalar_variable equal scalar 
            {
              Object RESULT =null;
		int scalar_variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int scalar_variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer scalar_variable = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double scalar = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	scalar_variables
	[scalar_variable]
	=
	scalar;
	
	System.out.println
	(
		"Scalar assignment - "+
		scalar
	);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= vector_variable equal vector 
            {
              Object RESULT =null;
		int vector_variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vector_variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer vector_variable = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] vector = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	System.out.print
	("Vector assignment - [");
	
	int
	element=
	0;
	
	while(true)
	{
		Double
		element_value=
		vector
		[element];
		
		vector_variables
		[vector_variable]
		[element]
		=
		element_value;
		
		System.out.print
		(element_value);
		
		++
		element;
		
		if
		(
			element
			==
			2
		)
		break;
		
		System.out.print
		(", ");
	}
	
	System.out.println
	("]");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= scalar 
            {
              Object RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double scalar = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	System.out.println
	(
		"Scalar expression - "+
		scalar
	);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= vector 
            {
              Object RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] vector = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	System.out.println
	(
		"Vector expression - ["
		+
		vector
		[0]
		+
		", "
		+
		vector
		[1]
		+
		"]"
	);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // vector ::= left_square_bracket scalar coma scalar right_square_bracket 
            {
              Double[] RESULT =null;
		int scalar_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scalar_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double scalar_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int scalar_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scalar_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double scalar_2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT
	=
	new
	Double
	[]
	{
		scalar_1,
		scalar_2
	};

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // vector ::= vector_variable 
            {
              Double[] RESULT =null;
		int vector_variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vector_variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer vector_variable = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT=
	vector_variables
	[vector_variable];

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // vector ::= vector plus vector 
            {
              Double[] RESULT =null;
		int vector_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vector_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] vector_1 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vector_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vector_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] vector_2 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT
	=
	new
	Double
	[]
	{
		vector_1
		[0]
		+
		vector_2
		[0],
		
		vector_1
		[1]
		+
		vector_2
		[1]
	};

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vector ::= vector minus vector 
            {
              Double[] RESULT =null;
		int vector_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vector_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] vector_1 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vector_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vector_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] vector_2 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
	RESULT
	=
	new
	Double
	[]
	{
		vector_1
		[0]
		-
		vector_2
		[0],
		
		vector_1
		[1]
		-
		vector_2
		[1]
	};

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vector ::= scalar multiply vector 
            {
              Double[] RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double scalar = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] vector = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	vector
	[0]
	*=
	scalar;
	
	vector
	[1]
	*=
	scalar;
	
	RESULT=
	vector;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vector ::= vector multiply scalar 
            {
              Double[] RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] vector = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double scalar = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	vector
	[0]
	*=
	scalar;
	
	vector
	[1]
	*=
	scalar;
	
	RESULT=
	vector;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // scalar ::= number 
            {
              Double RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double number = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT=
	number;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // scalar ::= scalar_variable 
            {
              Double RESULT =null;
		int scalar_variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scalar_variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer scalar_variable = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT=
	scalar_variables
	[scalar_variable];

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // scalar ::= minus scalar 
            {
              Double RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double scalar = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT=
	-scalar;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // scalar ::= scalar exponent scalar 
            {
              Double RESULT =null;
		int scalar_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int scalar_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double scalar_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scalar_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scalar_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double scalar_2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT=
	scalar_1
	*
	Math.pow
	(
		10,
		scalar_2
	);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // scalar ::= scalar power scalar 
            {
              Double RESULT =null;
		int scalar_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int scalar_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double scalar_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scalar_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scalar_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double scalar_2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT=
	Math.pow
	(
		scalar_1,
		scalar_2
	);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // scalar ::= scalar multiply scalar 
            {
              Double RESULT =null;
		int scalar_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int scalar_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double scalar_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scalar_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scalar_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double scalar_2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT
	=
	scalar_1
	*
	scalar_2;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // scalar ::= scalar divide scalar 
            {
              Double RESULT =null;
		int scalar_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int scalar_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double scalar_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scalar_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scalar_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double scalar_2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT
	=
	scalar_1
	/
	scalar_2;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // scalar ::= scalar plus scalar 
            {
              Double RESULT =null;
		int scalar_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int scalar_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double scalar_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scalar_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scalar_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double scalar_2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT
	=
	scalar_1
	+
	scalar_2;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // scalar ::= scalar minus scalar 
            {
              Double RESULT =null;
		int scalar_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int scalar_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double scalar_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scalar_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scalar_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double scalar_2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT
	=
	scalar_1
	-
	scalar_2;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // scalar ::= vector dot vector 
            {
              Double RESULT =null;
		int vector_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vector_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] vector_1 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vector_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vector_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] vector_2 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT
	=
	vector_1
	[0]
	*
	vector_2
	[0]
	+
	vector_1
	[1]
	*
	vector_2
	[1];

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
